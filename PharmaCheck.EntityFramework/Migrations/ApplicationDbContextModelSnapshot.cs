// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PharmaCheck.EntityFramework;

#nullable disable

namespace PharmaCheck.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PharmaCheck.Database.Entities.EntityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasMaxLength(20)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Creation Date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasMaxLength(20)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Deletion Date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasMaxLength(20)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Update Date");

                    b.HasKey("Id");

                    b.ToTable("Bases", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("EntityBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.MedicineEntity", b =>
                {
                    b.HasBaseType("PharmaCheck.Database.Entities.EntityBase");

                    b.Property<float>("BuyPrice")
                        .HasMaxLength(10)
                        .HasColumnType("real")
                        .HasColumnName("Starting Price");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Instruction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Medicine Name");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("Order ID");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid")
                        .HasColumnName("Pharmacy ID");

                    b.Property<float>("SellCoefficient")
                        .HasColumnType("real")
                        .HasColumnName("Sell Coefficient");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Medicine Type");

                    b.HasIndex("OrderId");

                    b.HasIndex("PharmacyId");

                    b.HasDiscriminator().HasValue("MedicineEntity");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.OrderEntity", b =>
                {
                    b.HasBaseType("PharmaCheck.Database.Entities.EntityBase");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("uuid")
                        .HasColumnName("User");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("OrderEntity");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.PharmacyEntity", b =>
                {
                    b.HasBaseType("PharmaCheck.Database.Entities.EntityBase");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("Adress");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Name");

                    b.Property<int>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasDiscriminator().HasValue("PharmacyEntity");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.UserEntity", b =>
                {
                    b.HasBaseType("PharmaCheck.Database.Entities.EntityBase");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("First Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Last Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("Phone Number");

                    b.HasDiscriminator().HasValue("UserEntity");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.MedicineEntity", b =>
                {
                    b.HasOne("PharmaCheck.Database.Entities.OrderEntity", "Order")
                        .WithMany("Medicines")
                        .HasForeignKey("OrderId");

                    b.HasOne("PharmaCheck.Database.Entities.PharmacyEntity", "Pharmacy")
                        .WithMany("Medicines")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.OrderEntity", b =>
                {
                    b.HasOne("PharmaCheck.Database.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.OrderEntity", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.PharmacyEntity", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("PharmaCheck.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
